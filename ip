import sympy as sm
M, m, ell, g, x1, x2, x3, x4, F = \
    sm.symbols('M, m, ell, g, x1, x2, x3, x4, F')
phi = 4*m*ell*x4**2 * sm.sin(x3) + 4*F - 3*m*g*sm.sin(x3)*sm.cos(x3)
phi /= 4*(M+m) - 3*m*sm.cos(x3)**2
dphi_F = phi.diff(F)
dphi_x3 = phi.diff(x3)
dphi_x4 = phi.diff(x4)
dphi_F_eq = dphi_F.subs([(F, 0), (x3, 0), (x4, 0)])
dphi_x3_eq = dphi_x3.subs([(F, 0), (x3, 0), (x4, 0)])
dphi_x4_eq = dphi_x4.subs([(F, 0), (x3, 0), (x4, 0)])
a = dphi_F_eq
b = -dphi_x3_eq
c = 3 / ell / (4*M + m)
d = 3 * (M+m)*g / ell / (4*M + m)
M_value = 0.3
m_value = 0.1
ell_value = 0.35
g_value = 9.81

def substitute_values(z):
    """
    documentation here
    :param z:
    :return:
    """
    return float(z.subs([(M, M_value), (m, m_value), (ell, ell_value), (g, g_value)]))

a_value = substitute_values(a)
b_value = substitute_values(b)
c_value = substitute_values(c)
d_value = substitute_values(d)
# float(sin^2(4))
print(type(a_value))
# -----------------------------------------------------------
# No more symbolic computations
# -----------------------------------------------------------
import control as ctrl
import matplotlib.pyplot as plt
import numpy as np
G_theta_tf = ctrl.TransferFunction([-c_value], [1, 0, -d_value])

# define a function that takes Kp, Ki, Kd and returns a
# ctrl.TransferFunction object for the PID controller
def pid(Kp, Ki, Kd):
    G_pid = Kp
    G_pid += Kd * ctrl.TransferFunction([1, 0], [1])
    G_pid += Ki * ctrl.TransferFunction([1], [1, 0])
    return G_pid

my_pid = pid(Kp=5, Ki=0.5, Kd=1)
G_closed_loop = ctrl.feedback(G_theta_tf, my_pid)
t_imp, theta_imp = ctrl.impulse_response(G_closed_loop)
plt.plot(t_imp, theta_imp)
plt.show()



#2
import sympy as sm
M, m, ell, g, x1, x2, x3, x4, F = \
    sm.symbols('M, m, ell, g, x1, x2, x3, x4, F')
phi = 4*m*ell*x4**2 * sm.sin(x3) + 4*F - 3*m*g*sm.sin(x3)*sm.cos(x3)
phi /= 4*(M+m) - 3*m*sm.cos(x3)**2
dphi_F = phi.diff(F)
dphi_x3 = phi.diff(x3)
dphi_x4 = phi.diff(x4)
dphi_F_eq = dphi_F.subs([(F, 0), (x3, 0), (x4, 0)])
dphi_x3_eq = dphi_x3.subs([(F, 0), (x3, 0), (x4, 0)])
dphi_x4_eq = dphi_x4.subs([(F, 0), (x3, 0), (x4, 0)])
a = dphi_F_eq
b = -dphi_x3_eq
c = 3 / ell / (4*M + m)
d = 3 * (M+m)*g / ell / (4*M + m)
M_value = 0.3
m_value = 0.1
ell_value = 0.35
g_value = 9.81

def substitute_values(z):
    """
    documentation here
    :param z:
    :return:
    """
    return float(z.subs([(M, M_value), (m, m_value), (ell, ell_value), (g, g_value)]))

a_value = substitute_values(a)
b_value = substitute_values(b)
c_value = substitute_values(c)
d_value = substitute_values(d)
# float(sin^2(4))
print(type(a_value))
# -----------------------------------------------------------
# No more symbolic computations
# -----------------------------------------------------------
import control as ctrl
import matplotlib.pyplot as plt
G_theta_tf = ctrl.TransferFunction([-c_value], [1, 0, -d_value])
t_imp, theta_imp = ctrl.impulse_response(G_theta_tf)
plt.plot(t_imp, theta_imp)
plt.show()


#3
    

import sympy as sm
M, m, ell, g, x1, x2, x3, x4, F = \
    sm.symbols('M, m, ell, g, x1, x2, x3, x4, F')
phi = 4*m*ell*x4**2 * sm.sin(x3) + 4*F - 3*m*g*sm.sin(x3)*sm.cos(x3)
phi /= 4*(M+m) - 3*m*sm.cos(x3)**2
dphi_F = phi.diff(F)
dphi_x3 = phi.diff(x3)
dphi_x4 = phi.diff(x4)
dphi_F_eq = dphi_F.subs([(F, 0), (x3, 0), (x4, 0)])
dphi_x3_eq = dphi_x3.subs([(F, 0), (x3, 0), (x4, 0)])
dphi_x4_eq = dphi_x4.subs([(F, 0), (x3, 0), (x4, 0)])
a = dphi_F_eq
b = -dphi_x3_eq
c = 3 / ell / (4*M + m)
d = 3 * (M+m)*g / ell / (4*M + m)
M_value = 0.3
m_value = 0.1
ell_value = 0.35
g_value = 9.81
def substitute_values(z):
    """
    documentation here
:param z:
:return:
    """
return z.subs([(M, M_value), (m, m_value), (ell, ell_value), (g, g_value)])

a_value = substitute_values(a)
b_value = substitute_values(b)
c_value = substitute_values(c)
d_value = substitute_values(d)
# -----------------------------------------------------------
# No more symbolic computations
# -----------------------------------------------------------
import control as ctrl
G_theta_tf = ctrl.TransferFunction([-c_value], [1, 0, d_value])


#4:

s, t = sm.symbols('s, t')
a, b, c, d = sm.symbols('a, b, c, d', real=True, positive=True)
Gtheta_s = -c / (s**2 - d)
# Input: F(t) = sin(wt)
w = sm.symbols('Ï‰', real=True)
F_s = w / (s**2 + w**2)
Theta_s = Gtheta_s * F_s
theta_t = sm.inverse_laplace_transform(Theta_s, s, t)
sm.pprint(theta_t.simplify())

